{"version":3,"file":"static/js/488.9d634bd3.chunk.js","mappings":"mKAAO,IAAMA,EAAiB,CAC5BC,MAAO,CACLC,SAAU,oBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,qBAEXC,UAAW,CACTF,MAAO,IACPC,QAAS,uBAEXE,QAAS,CACPH,MAAO,oCACPC,QAAS,kBAGbG,SAAU,CACRN,SAAU,uBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,qBAEXC,UAAW,CACTF,MAAO,IACPC,QAAS,wB,uXCrBFI,EAAYC,EAAAA,GAAAA,KAAH,qQAQA,qBAAGC,MAAkBC,OAAOC,KAA5B,IAEN,qBAAGF,MAAkBG,QAAQC,IAA7B,IAEkB,qBAAGJ,MAAkBK,YAAYC,MAAjC,IAKrBC,EAAcR,EAAAA,GAAAA,IAAH,6DAKXS,EAAWT,EAAAA,GAAAA,EAAH,qKAMa,qBAAGC,MAAkBK,YAAYC,MAAjC,IAKrBG,EAAcV,EAAAA,GAAAA,EAAH,yHAGU,qBAAGC,MAAkBK,YAAYC,MAAjC,IAKrBI,EAAeX,EAAAA,GAAAA,OAAH,qlBAeV,qBAAGC,MAAkBW,UAAU,EAA/B,IACE,qBAAGX,MAAkBY,YAAYC,KAAjC,IACA,qBAAGb,MAAkBc,YAAYC,MAAjC,IACN,qBAAGf,MAAkBC,OAAOe,KAA5B,IACS,qBAAGhB,MAAkBiB,eAAeJ,KAApC,IAIJ,qBAAGb,MAAkBC,OAAOiB,MAAMC,IAAlC,GACJnB,EAAAA,EAAAA,QAAAA,cAEI,qBAAGA,MAAkBoB,YAAYC,OAAO,CAAC,cAAzC,IAaHC,EAAYvB,EAAAA,GAAAA,KAAH,8LAOXC,EAAAA,EAAAA,OAAAA,IAAAA,MAIEuB,EAAYxB,EAAAA,GAAAA,KAAH,qJAKXC,EAAAA,EAAAA,OAAAA,IAAAA,MAIEwB,EAAazB,EAAAA,GAAAA,IAAH,0LAKWC,EAAAA,EAAAA,YAAAA,IAKrByB,EAAa1B,EAAAA,GAAAA,MAAH,qMAKZC,EAAAA,EAAAA,OAAAA,MACuBA,EAAAA,EAAAA,YAAAA,IAKrB0B,EAAc3B,EAAAA,GAAAA,MAAH,86BAIRC,EAAAA,EAAAA,OAAAA,MAAAA,KAUHA,EAAAA,EAAAA,OAAAA,KAAAA,KAmB6BA,EAAAA,EAAAA,OAAAA,MAAAA,MAK7B2B,EAAoB5B,EAAAA,GAAAA,IAAH,yLAQI,qBAAGC,MAAkBK,YAAY,EAAjC,IAKrBuB,EAAa7B,EAAAA,GAAAA,OAAH,4ZAWN,qBAAGC,MAAkBc,YAAYe,IAAjC,IAGN,gBAAG7B,EAAH,EAAGA,MAAH,SAAU8B,SACN9B,EAAMC,OAAOC,MAAQF,EAAMC,OAAO8B,KAAKZ,IAD3C,IAIQ,qBAAGnB,MAAkBgC,MAAMC,EAA3B,IACG,gBAAGjC,EAAH,EAAGA,MAAH,SAAU8B,SACjB9B,EAAMC,OAAOiC,OAAO9B,KAAOJ,EAAMC,OAAOiB,MAAMC,IADvC,G,2PC1KP,SAASgB,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAqBC,EAAAA,EAAAA,IAAYC,EAAAA,IACjCC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAEhC,GAMIC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,WACNC,cAAe,CACbvD,MAAO,GACPO,SAAU,GACViD,gBAAiB,MAVnBC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,UACAC,EAJF,EAIEA,MAJF,IAKEC,UAAaC,EALf,EAKeA,aAAcC,EAL7B,EAK6BA,cAAeC,EAL5C,EAK4CA,OAUtCC,EAAY,mCAAG,8FAAST,gBAAoBU,GAA7B,8BAEXpB,GAASqB,EAAAA,EAAAA,IAAkBD,IAAOE,SAFvB,uBAGXtB,GAASuB,EAAAA,EAAAA,IAAWH,IAAOE,SAHhB,OAIjBR,IAJiB,yGAAH,sDAQlB,OACE,+BACE,SAAC,IAAD,CAAWU,SAAUZ,EAAaO,GAAlC,UACE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAYM,QAAQ,QAApB,UACGR,EAAc/D,OAASgE,EAAOhE,OAC7B,SAAC,KAAD,gBACE,KAHN,aAMA,SAAC,MAAD,QACEwE,KAAK,OACLC,aAAa,MACbC,YAAY,kBACRjB,EAAS,QAAS1D,EAAAA,EAAAA,YAEvBgE,EAAc/D,OAASgE,EAAOhE,OAC7B,SAAC,IAAD,UAAYgE,EAAOhE,MAAMI,UACvB,SAEN,UAAC,KAAD,YACE,UAAC,KAAD,CAAYmE,QAAQ,WAApB,UACGR,EAAcxD,UAAYyD,EAAOzD,UAChC,SAAC,KAAD,gBACE,KAHN,gBAMA,SAAC,MAAD,QACEiE,KAAK,WACLC,aAAa,MACbC,YAAY,YACRjB,EAAS,WAAY1D,EAAAA,EAAAA,YAE1BgE,EAAcxD,UAAYyD,EAAOzD,UAChC,SAAC,IAAD,UAAYyD,EAAOzD,SAASH,UAC1B,SAEN,UAAC,KAAD,YACE,UAAC,KAAD,CAAYmE,QAAQ,WAApB,UACGR,EAAcP,iBAAmBQ,EAAOR,iBACvC,SAAC,KAAD,gBACE,KAHN,wBAMA,SAAC,MAAD,QACEgB,KAAK,WACLC,aAAa,MACbC,YAAY,oBACRjB,EAAS,kBAAmB,CAC9BkB,SAAU,SAAAxE,GAER,OADqBwD,IAAbpD,WACYJ,GAAS,yBAC9B,MAGJ4D,EAAcP,iBAAmBQ,EAAOR,iBACvC,SAAC,IAAD,UAAYQ,EAAOR,gBAAgBpD,UACjC,SAEN,SAAC,KAAD,UACG0D,GACC,+BACId,IAAuB4B,EAAAA,EAAAA,SACvBzB,IAAgByB,EAAAA,EAAAA,WAAmB,SAACC,EAAA,EAAD,OAGvC,iCACE,SAAC,KAAD,CAAYL,KAAK,SAASM,GAAIC,EAAAA,GAAMC,GAAIC,EAAAA,EAAAA,MAAxC,qBAGA,SAAC,KAAD,CAAYT,KAAK,SAAShC,UAAU,EAApC,qCAUf,C","sources":["components/Auth/Auth.validation.js","components/Auth/AuthForm.styled.js","components/Auth/Registration/Registration.jsx"],"sourcesContent":["export const authValidation = {\n  email: {\n    required: 'Email is required',\n    minLength: {\n      value: 3,\n      message: 'Minimum 3 letters',\n    },\n    maxLength: {\n      value: 256,\n      message: 'Maximum 256 letters',\n    },\n    pattern: {\n      value: /^[\\w-\\\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n      message: 'Invalid email',\n    },\n  },\n  password: {\n    required: 'Password is required',\n    minLength: {\n      value: 8,\n      message: 'Minimum 8 letters',\n    },\n    maxLength: {\n      value: 100,\n      message: 'Maximum 100 letters',\n    },\n  },\n};\n","import styled from 'styled-components';\nimport { theme } from 'theme';\n\nexport const FormStyle = styled.form`\n  display: flex;\n  justify-content: center;\n\n  max-width: 100%;\n  padding: 40px 20px;\n\n  border-radius: 30px;\n  background-color: ${({ theme }) => theme.colors.white};\n\n  box-shadow: ${({ theme }) => theme.shadows.base};\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.mobile}) {\n    padding: 56px 84px;\n  }\n`;\n\nexport const FormContent = styled.div`\n  width: 100%;\n  max-width: 258px;\n`;\n\nexport const FormText = styled.p`\n  margin-bottom: 16px;\n  padding: 0 9px;\n\n  text-align: center;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.mobile}) {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const FormSubText = styled.p`\n  margin-bottom: 16px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.mobile}) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const GoogleButton = styled.button`\n  cursor: pointer;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 120px;\n  height: 40px;\n\n  padding: 10px;\n  margin-bottom: 32px;\n  margin-left: auto;\n  margin-right: auto;\n\n  font-size: ${({ theme }) => theme.fontSizes[4]};\n  line-height: ${({ theme }) => theme.lineHeights.small};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  color: ${({ theme }) => theme.colors.black};\n  letter-spacing: ${({ theme }) => theme.letterSpacings.small};\n\n  border: none;\n  border-radius: 26px;\n  background: ${({ theme }) => theme.colors.lilac.dark};\n  filter: ${theme.filters.googleButton};\n\n  transition: ${({ theme }) => theme.transitions.create(['box-shadow'])};\n\n  :hover {\n    box-shadow: 1px 2px 6px 1px rgba(33, 33, 33, 0.4);\n  }\n\n  svg {\n    width: 18px;\n    height: 18px;\n    margin-right: 10px;\n  }\n`;\n\nexport const ErrorText = styled.span`\n  position: absolute;\n  bottom: -20px;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.1;\n  margin: 4px 0 0 0;\n  color: ${theme.colors.red.base};\n  /* text-align: left; */\n`;\n\nexport const ErrorStar = styled.span`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.1;\n  margin: 4px 0 0 0;\n  color: ${theme.colors.red.base};\n  /* text-align: left; */\n`;\n\nexport const FieldStyle = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  @media screen and (min-width: ${theme.breakpoints[1]}) {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const LabelInput = styled.label`\n  font-size: 10px;\n  line-height: 1.1;\n  letter-spacing: 0.04em;\n  margin-bottom: 12px;\n  color: ${theme.colors.black};\n  @media screen and (min-width: ${theme.breakpoints[1]}) {\n    font-size: 12px;\n  }\n`;\n\nexport const InputStyled = styled.input`\n  margin: 0;\n  padding: 17px 19px;\n  font: inherit;\n  background: ${theme.colors.lilac.dark};\n  border-radius: 30px;\n  height: 52px;\n  width: 100%;\n  border: none;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.1;\n  letter-spacing: 0.04em;\n  &::placeholder {\n    color: ${theme.colors.grey.base};\n  }\n  &:focus:invalid {\n    filter: drop-shadow(1px 2px 3px rgba(235, 87, 87, 0.2));\n  }\n  :valid {\n    filter: drop-shadow(1px 2px 3px rgba(rgb(255, 117, 29), 0.2));\n  }\n  input:-webkit-autofill,\n  input:-webkit-autofill:hover,\n  input:-webkit-autofill:focus,\n  textarea:-webkit-autofill,\n  textarea:-webkit-autofill:hover,\n  textarea:-webkit-autofill:focus,\n  select:-webkit-autofill,\n  select:-webkit-autofill:hover,\n  select:-webkit-autofill:focus {\n    border: none;\n    -webkit-text-fill-color: #52555f;\n    /* -webkit-box-shadow: 0 0 0 1000px ${theme.colors.lilac.dark} inset; */\n    transition: background-color 5000s ease-in-out 0s;\n  }\n`;\n\nexport const FormButtonsLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n\n  width: 100%;\n  margin-top: 40px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints[1]}) {\n    gap: 14px;\n  }\n`;\n\nexport const FormButton = styled.button`\n  cursor: pointer;\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 50%;\n  max-width: 122px;\n  height: 44px;\n\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  text-transform: uppercase;\n  text-decoration: none;\n  color: ${({ theme, isActive }) =>\n    isActive ? theme.colors.white : theme.colors.grey.dark};\n\n  border: none;\n  border-radius: ${({ theme }) => theme.radii.sm}px;\n  background-color: ${({ theme, isActive }) =>\n    isActive ? theme.colors.orange.base : theme.colors.lilac.dark};\n\n  filter: drop-shadow(1px 3px 5px rgba(82, 85, 95, 0.15));\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'constants/routes';\nimport { loginThunk, registrationThunk } from 'redux/auth/auth.thunk';\nimport {\n  ErrorText,\n  ErrorStar,\n  FieldStyle,\n  FormStyle,\n  InputStyled,\n  LabelInput,\n  FormButtonsLayout,\n  FormContent,\n  FormButton,\n} from '../AuthForm.styled';\nimport { useForm } from 'react-hook-form';\nimport { authValidation } from '../Auth.validation';\nimport {\n  selectLoginStatus,\n  selectRegistrationStatus,\n} from 'redux/auth/auth.selectors';\nimport { Status } from 'constants';\nimport AppSpinner from 'components/Spinner/AppSpinner';\n\nexport default function Registration() {\n  const dispatch = useDispatch();\n  const registrationStatus = useSelector(selectRegistrationStatus);\n  const loginStatus = useSelector(selectLoginStatus);\n\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    reset,\n    formState: { isSubmitting, touchedFields, errors },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n  });\n\n  const loginHandler = async ({ confirmPassword, ...data }) => {\n    try {\n      await dispatch(registrationThunk(data)).unwrap();\n      await dispatch(loginThunk(data)).unwrap();\n      reset();\n    } catch (err) {}\n  };\n\n  return (\n    <>\n      <FormStyle onSubmit={handleSubmit(loginHandler)}>\n        <FormContent>\n          <FieldStyle>\n            <LabelInput htmlFor=\"email\">\n              {touchedFields.email && errors.email ? (\n                <ErrorStar>*</ErrorStar>\n              ) : null}\n              Email:\n            </LabelInput>\n            <InputStyled\n              type=\"text\"\n              autoComplete=\"off\"\n              placeholder=\"your@email.com\"\n              {...register('email', authValidation.password)}\n            />\n            {touchedFields.email && errors.email ? (\n              <ErrorText>{errors.email.message}</ErrorText>\n            ) : null}\n          </FieldStyle>\n          <FieldStyle>\n            <LabelInput htmlFor=\"password\">\n              {touchedFields.password && errors.password ? (\n                <ErrorStar>*</ErrorStar>\n              ) : null}\n              Password:\n            </LabelInput>\n            <InputStyled\n              type=\"password\"\n              autoComplete=\"off\"\n              placeholder=\"Password\"\n              {...register('password', authValidation.password)}\n            />\n            {touchedFields.password && errors.password ? (\n              <ErrorText>{errors.password.message}</ErrorText>\n            ) : null}\n          </FieldStyle>\n          <FieldStyle>\n            <LabelInput htmlFor=\"password\">\n              {touchedFields.confirmPassword && errors.confirmPassword ? (\n                <ErrorStar>*</ErrorStar>\n              ) : null}\n              Confirm password:\n            </LabelInput>\n            <InputStyled\n              type=\"password\"\n              autoComplete=\"off\"\n              placeholder=\"Confirm password\"\n              {...register('confirmPassword', {\n                validate: value => {\n                  const { password } = getValues();\n                  return password === value || 'Passwords should match!';\n                },\n              })}\n            />\n            {touchedFields.confirmPassword && errors.confirmPassword ? (\n              <ErrorText>{errors.confirmPassword.message}</ErrorText>\n            ) : null}\n          </FieldStyle>\n          <FormButtonsLayout>\n            {isSubmitting ? (\n              <>\n                {(registrationStatus === Status.PENDING ||\n                  loginStatus === Status.PENDING) && <AppSpinner />}\n              </>\n            ) : (\n              <>\n                <FormButton type=\"button\" as={Link} to={routes.LOGIN}>\n                  Log In\n                </FormButton>\n                <FormButton type=\"submit\" isActive={true}>\n                  Registration\n                </FormButton>\n              </>\n            )}\n          </FormButtonsLayout>\n        </FormContent>\n      </FormStyle>\n    </>\n  );\n}\n"],"names":["authValidation","email","required","minLength","value","message","maxLength","pattern","password","FormStyle","styled","theme","colors","white","shadows","base","breakpoints","mobile","FormContent","FormText","FormSubText","GoogleButton","fontSizes","lineHeights","small","fontWeights","medium","black","letterSpacings","lilac","dark","transitions","create","ErrorText","ErrorStar","FieldStyle","LabelInput","InputStyled","FormButtonsLayout","FormButton","bold","isActive","grey","radii","sm","orange","Registration","dispatch","useDispatch","registrationStatus","useSelector","selectRegistrationStatus","loginStatus","selectLoginStatus","useForm","mode","defaultValues","confirmPassword","register","handleSubmit","getValues","reset","formState","isSubmitting","touchedFields","errors","loginHandler","data","registrationThunk","unwrap","loginThunk","onSubmit","htmlFor","type","autoComplete","placeholder","validate","Status","AppSpinner","as","Link","to","routes"],"sourceRoot":""}